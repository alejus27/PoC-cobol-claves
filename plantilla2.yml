AWSTemplateFormatVersion: 2010-09-09
Description: "Proof of concept dto-poc-cobol-claves-v2"
Parameters:
  GeneralFirst:
    Type: String
    Description: Nombre general
    Default: dto-poc-cobol-claves
  EndSuffix:
    Type: String
    Description: Sufijo final
    Default: autodeploy-lambda
  Environment:
    Type: String
    Description: Ambiente
    Default: sandbox

Resources:
  RolePocCobolClaves:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RolePocCobolClaves-v2
      #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/BUAdminBasePolicy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  ProxyCobolFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${GeneralFirst}-ProxyCobol-v2-${Environment}-${EndSuffix}
      Code:
        ZipFile: |
            def lambda_handler(event, context):
                  return {
                      'statusCode': 200,
                      'body':
                      """010080[CCO] CAMARAS COMERCIO DECISOR                                     0101CCD010080[CCO] CCO VS WS                                                    0121MAN990080012.900422614.900422614.[PROD=68].                                     !*â™¥"""
                  }
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - RolePocCobolClaves
        - Arn
      Runtime: python3.9
      Timeout: 5
      Architectures:
        - x86_64

  ResponseFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${GeneralFirst}-Response-v2-${Environment}-${EndSuffix}
      Code:
          ZipFile: |
              import boto3
              import json
              import os
              import pandas

              lambda_client = boto3.client('lambda')
              COBOL_FUNCTION = os.environ["PROXY_COBOL_FUNCTION"]


              config=[
              {
                  "tipo": "01",
                  "longitud": 80,
                  "nombre": "producto",
                  "campos": [
                            {
                            "nombre": "idProducto",
                            "longitud": 5,
                            "posInicial": 7,
                            "posFinal": 11
                            },
                            {
                            "nombre": "nombreProducto",
                            "longitud": 61,
                            "posInicial": 13,
                            "posFinal": 73
                            },
                            {
                            "nombre": "clave",
                            "longitud": 5,
                            "posInicial": 76,
                            "posFinal": 80
                            }
                            ]
              },
              {
                    "tipo": "02",
                    "longitud": 80,
                    "nombre": "cliente",
                    "campos": [
                              {
                              "nombre": "idCliente",
                              "longitud": 5,
                              "posInicial": 7,
                              "posFinal": 11
                              },
                              {
                              "nombre": "nombreCliente",
                              "longitud": 61,
                              "posInicial": 13,
                              "posFinal": 73
                              },
                              {
                              "nombre": "clave",
                              "longitud": 5,
                              "posInicial": 76,
                              "posFinal": 80
                              }
                              ]
                },
                {
                    "tipo": "03",
                    "longitud": 80,
                    "nombre": "venta",
                    "campos": [
                              {
                                  "nombre": "idVenta",
                                  "longitud": 5,
                                  "posInicial": 7,
                                  "posFinal": 11
                              },
                              {
                                  "nombre": "idProducto",
                                  "longitud": 5,
                                  "posInicial": 13,
                                  "posFinal": 17
                              },
                              {
                                  "nombre": "idCliente",
                                  "longitud": 5,
                                  "posInicial": 19,
                                  "posFinal": 23
                              },
                              {
                                  "nombre": "fecha",
                                  "longitud": 10,
                                  "posInicial": 25,
                                  "posFinal": 34
                              },
                              {
                                  "nombre": "cantidad",
                                  "longitud": 5,
                                  "posInicial": 36,
                                  "posFinal": 40
                              },
                              {
                                  "nombre": "precio",
                                  "longitud": 5,
                                  "posInicial": 42,
                                  "posFinal": 46
                              },
                              {
                                  "nombre": "clave",
                                  "longitud": 5,
                                  "posInicial": 76,
                                  "posFinal": 80
                              }
                              ]
                },
                {
                    "tipo": "99",
                    "longitud": 80,
                    "nombre": "resultadoConsulta",
                    "campos": [
                              {
                                  "nombre": "respuesta",
                                  "longitud": 2,
                                  "posInicial": 7,
                                  "posFinal": 8
                              },
                              {
                                  "nombre": "mensajeOriginal",
                                  "longitud": 70,
                                  "posInicial": 9,
                                  "posFinal": 78
                              }
                              ]
                  }
              ]

              json_data = json.dumps(config)

              configurations = pandas.read_json(json_data, dtype={
                  'tipo': str,
              })

              def find_register(data):
                  id_register = data[:2]
                  element = configurations.loc[configurations['tipo'] == id_register]
                  return element.to_dict('records')[0]

              def lambda_handler(event, context):
                  respons_query = invole_cobol_lambda(event['body'])
                  config_resgister = find_register(respons_query['body'])
                  result = mapping_response(config_resgister, respons_query['body'])

                  return {
                      'statusCode': 200,
                      'headers': {
                          "Content-Type": "application/json"
                      },
                      'body': result
                  }


              def invole_cobol_lambda(body):
                  response_cobol = lambda_client.invoke(
                      FunctionName=COBOL_FUNCTION,
                      InvocationType='RequestResponse',
                      Payload=bytes(body, 'utf-8')
              )

                  response_cobol = json.loads(response_cobol['Payload'].read().decode('utf-8'))
                  return response_cobol


              def mapping_response(config, data):
                  maping_data = {'claves': []}
                  position = 0

                  while position < len(data) - config['longitud']:
                      sub_data = data[position:position + config['longitud']]
                      new_resgister = create_resgister(config['campos'], sub_data)
                      maping_data['claves'].append(new_resgister)
                      position += config['longitud']

                  return json.dumps(maping_data)


              def create_resgister(config_field, data):
                  register = {}
                  for campo in config_field:
                      value = data[campo['posInicial'] - 1: campo['posFinal']].rstrip()
                      register[campo['nombre']] = value

                  return register
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:3
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt 
        - RolePocCobolClaves
        - Arn
      Runtime: python3.9
      Timeout: 5
      Environment:
        Variables:
          PROXY_COBOL_FUNCTION: !Ref ProxyCobolFunction
      Architectures:
        - x86_64

  APIPocCobolClaves:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${GeneralFirst}-v2
      ApiKeySourceType: HEADER
    DependsOn:
      - RolePocCobolClaves

  DeploymentPocCobolClaves:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIPocCobolClaves
    DependsOn:
      - APIPocCobolClaves
      - PocCobolClavesMethod

  ResponseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIPocCobolClaves.RootResourceId
      RestApiId: !Ref APIPocCobolClaves
      PathPart: response
    DependsOn:
      - APIPocCobolClaves

  PocCobolClavesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIPocCobolClaves
      ResourceId: !Ref ResponseResource
      HttpMethod: POST
      AuthorizationType: NONE
      OperationName: ResponseCobolClaves
      Integration:
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResponseFunction.Arn}/invocations"
    DependsOn:
      - ResponseFunction
      - ResponseResource

  SandboxStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref DeploymentPocCobolClaves
      StageName: !Ref Environment
      RestApiId: !Ref APIPocCobolClaves
    DependsOn:
      - DeploymentPocCobolClaves

  ResponseFunctionApiPermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResponseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIPocCobolClaves}/*/POST/response"

