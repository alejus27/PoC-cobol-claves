AWSTemplateFormatVersion: 2010-09-09
Description: "Proof of concept dto-poc-cobol-claves-2"
Parameters:
  GeneralFirst:
    Type: String
    Description: Nombre general
    Default: dto-poc-cobol-claves
  EndSuffix:
    Type: String
    Description: Sufijo final
    Default: autodeploy-lambda
  Environment:
    Type: String
    Description: Ambiente
    Default: sandbox

Resources:
  RolePocCobol:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RolePocCobol--V2
      #PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/BUAdminBasePolicy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  ProxyCobolFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${GeneralFirst}-ProxyCobol2-${Environment}-${EndSuffix}
      Code:
        S3Bucket: aws-sam-cli-managed-default-samclisourcebucket-1oeao8rid0klc
        S3Key: PoCCobol-V2/bfbade58be0086902a10ed26507de304
      Handler: proxy.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - RolePocCobol
        - Arn
      Runtime: python3.9
      Timeout: 5
      Architectures:
        - x86_64

  ResponseFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub ${GeneralFirst}-Response2-${Environment}-${EndSuffix}
      Code:
        S3Bucket: aws-sam-cli-managed-default-samclisourcebucket-1oeao8rid0klc
        S3Key: PoCCobol-V2/08eccee6666ba231a211a6421fe7bda5
      Handler: response.lambda_handler
      MemorySize: 256
      Role: !GetAtt 
        - RolePocCobol
        - Arn
      Runtime: python3.9
      Timeout: 5
      Environment:
        Variables:
          PROXY_COBOL_FUNCTION: !Ref ProxyCobolFunction
      Architectures:
        - x86_64
        
  RestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref RestApiDeployment
      RestApiId: !Ref RestApi
      StageName: Prod

  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: 'RestApi deployment'
      RestApiId: !Ref RestApi
      StageName: Stage

  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: PoC-API
        paths:
          /response:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResponseFunction.Arn}/invocations
                responses: {}
        swagger: '2.0'

  ResponseFunctionApiPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ResponseFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/response
        - __ApiId__: !Ref RestApi
          __Stage__: '*'

